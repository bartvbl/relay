import java_cup.runtime.*;
import parser.nodes.AdditionExpressionNode;
import parser.nodes.BlockContentItemNode;
import parser.nodes.BlockContentListNode;
import parser.nodes.BlockPropertyNode;
import parser.nodes.CodeBlockNode;
import parser.nodes.CodeStatementNode;
import parser.nodes.ExpressionNode;
import parser.nodes.FunctionCallNode;
import parser.nodes.IdentifyerNode;
import parser.nodes.ParameterListNode;
import parser.nodes.RootNode;
import parser.nodes.BlockNode;
import parser.nodes.StatementListNode;
import parser.nodes.StatementType;
import parser.nodes.UnitNode;
import parser.nodes.ValueNode;
import parser.nodes.VariableAccessNode;
import relay.data.Unit;

/* terminals */

terminal NEW_LINE;
terminal Double NUMBER;
terminal COLON;
terminal SEMICOLON;
terminal DOT;
terminal String IDENTIFYER;
terminal COMMA;

terminal BLOCK_OPEN;
terminal BLOCK_CLOSE;

terminal CODE_BLOCK_OPEN;
terminal CODE_BLOCK_CLOSE;

terminal UnitNode UNIT_PIXELS;
terminal UnitNode UNIT_PERCENT;

terminal OPERATOR_PLUS;
terminal OPERATOR_MINUS;

terminal KEYWORD_LINE;
terminal KEYWORD_FROM;
terminal KEYWORD_TO;

/* non-terminals */

non terminal RootNode 				goal;
non terminal BlockNode 				block;
non terminal IdentifyerNode 		identifyer;
non terminal BlockContentListNode	block_content_list;
non terminal BlockContentItemNode 	block_content_line;
non terminal BlockContentItemNode 	block_content_item;
non terminal BlockPropertyNode 		block_property;
non terminal ExpressionNode 		expression;
non terminal UnitNode 				unit;
non terminal VariableAccessNode 	variable_access;
non terminal FunctionCallNode 		function_call;
non terminal CodeBlockNode 			code_block;
non terminal StatementListNode 		code_statement_list;
non terminal CodeStatementNode 		code_statement;
non terminal ParameterListNode 		parameter_list;

/* precedence rules */

precedence left OPERATOR_PLUS, OPERATOR_MINUS; 
precedence left NEW_LINE, BLOCK_CLOSE;

/* start symbol definition */

start with goal;

/* grammar definition */

goal ::=	
		block:block 																			{: RESULT = new RootNode(block); :}
	;

block ::=	
		BLOCK_OPEN identifyer:blockName NEW_LINE block_content_list:blockContent BLOCK_CLOSE 	{: RESULT = new BlockNode(blockName, blockContent); :}
	|	BLOCK_OPEN NEW_LINE block_content_list:blockContent BLOCK_CLOSE							{: RESULT = new BlockNode(new IdentifyerNode("[untitled block]"), blockContent); :}
	;

block_content_list ::=	
		/* empty */																				{: RESULT = null; :}
	|	block_content_list:remainingNodes block_content_line:listNode							{: RESULT = new BlockContentListNode(listNode, remainingNodes); :}
	;

block_content_line ::=
		block_content_item:item NEW_LINE														{: RESULT = item; :}
	|	block_content_item:item SEMICOLON														{: RESULT = item; :}
	;

block_content_item ::=
		block:item 																				{: RESULT = new BlockContentItemNode(item); :}
	|	block_property:item 																	{: RESULT = new BlockContentItemNode(item); :}
	|	code_block:item 																		{: RESULT = new BlockContentItemNode(item); :}
	|	/* empty */																				{: RESULT = new BlockContentItemNode(); :}
	;

code_block ::=
		CODE_BLOCK_OPEN code_statement_list:statementList CODE_BLOCK_CLOSE 						{: RESULT = new CodeBlockNode(statementList); :}
	;

code_statement_list ::=
		code_statement:statement code_statement_list:remainingNodes 							{: RESULT = new StatementListNode(statement, remainingNodes); :}
	|	code_statement:statement 																{: RESULT = new StatementListNode(statement); :}
	;

code_statement ::=
		KEYWORD_LINE KEYWORD_FROM BLOCK_OPEN expression:fromX COMMA expression:fromY BLOCK_CLOSE KEYWORD_TO BLOCK_OPEN expression:toX COMMA expression:toY BLOCK_CLOSE 																{: RESULT = new CodeStatementNode(StatementType.LINE, fromX, fromY, toX, toY); :}
	;

block_property ::=
		identifyer:identifyer COLON expression:expression										{: RESULT = new BlockPropertyNode(identifyer, expression); :}
	;

expression ::=
		NUMBER:value unit:unit 																	{: RESULT = new ValueNode(value, unit); :}
	|	expression:lefthandside OPERATOR_PLUS expression:righthandside							{: RESULT = new AdditionExpressionNode(lefthandside, righthandside); :}
	|	expression:lefthandside OPERATOR_MINUS expression:righthandside							{: RESULT = new SubtractionExpressionNode(lefthandside, righthandside); :}
	|	variable_access:variable_access 														{: RESULT = variable_access; :}
	|	function_call:call																		{: RESULT = call; :}
	;

function_call ::=
		IDENTIFYER:identifyer BLOCK_OPEN parameter_list:parameters BLOCK_CLOSE 					{: RESULT = new FunctionCallNode(identifyer, parameters); :}
	;

parameter_list ::=
		expression:expression COMMA parameter_list:remainingNodes 								{: RESULT = new ParameterListNode(expression, remainingNodes); :}
	|	/* empty */ 																			{: RESULT = null; :}
	;

variable_access ::=
		identifyer:identifyer DOT variable_access:remainingAccess								{: RESULT = new VariableAccessNode(identifyer, remainingAccess); :}
	|	identifyer:identifyer 																	{: RESULT = new VariableAccessNode(identifyer); :}
	;

unit ::=
		UNIT_PIXELS 																			{: RESULT = new UnitNode(Unit.PIXELS); :}
	|	UNIT_PERCENT 																			{: RESULT = new UnitNode(Unit.PERCENT); :}
	;

identifyer ::=
		IDENTIFYER:identifyer 																	{: RESULT = new IdentifyerNode(identifyer); :}
	;