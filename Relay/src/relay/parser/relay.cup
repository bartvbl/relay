import java_cup.runtime.*;

import relay.parser.symbols.AdditionExpressionSymbol;
import relay.parser.symbols.BlockContentItemSymbol;
import relay.parser.symbols.BlockContentListSymbol;
import relay.parser.symbols.BlockPropertySymbol;
import relay.parser.symbols.BracketExpressionSymbol;
import relay.parser.symbols.CodeBlockSymbol;
import relay.parser.symbols.CodeStatementSymbol;
import relay.parser.symbols.ConstantValueSymbol;
import relay.parser.symbols.ExpressionSymbol;
import relay.parser.symbols.FunctionCallSymbol;
import relay.parser.symbols.IdentifyerSymbol;
import relay.parser.symbols.LineStatementSymbol;
import relay.parser.symbols.ParameterListSymbol;
import relay.parser.symbols.PercentValueSymbol;
import relay.parser.symbols.RootSymbol;
import relay.parser.symbols.BlockSymbol;
import relay.parser.symbols.RelaySimpleSymbol;
import relay.parser.symbols.StatementListSymbol;
import relay.parser.symbols.SubtractionExpressionSymbol;
import relay.parser.symbols.UnitSymbol;
import relay.parser.symbols.VariableAccessSymbol;
import relay.parser.symbols.VariableDefinitionSymbol;
import relay.data.Unit;
import relay.types.BlockType;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

import relay.data.Unit;
import relay.types.BlockType;

/* terminals */

terminal RelaySimpleSymbol NEW_LINE;
terminal RelaySimpleSymbol COLON;
terminal RelaySimpleSymbol SEMICOLON;
terminal RelaySimpleSymbol DOT;
terminal RelaySimpleSymbol COMMA;

terminal Double NUMBER;

terminal String IDENTIFYER;

terminal RelaySimpleSymbol BLOCK_OPEN;
terminal RelaySimpleSymbol BLOCK_CLOSE;

terminal RelaySimpleSymbol CODE_BLOCK_OPEN;
terminal RelaySimpleSymbol CODE_BLOCK_CLOSE;

terminal UnitSymbol UNIT_PIXELS;
terminal UnitSymbol UNIT_PERCENT;

terminal RelaySimpleSymbol OPERATOR_PLUS;
terminal RelaySimpleSymbol OPERATOR_MINUS;
terminal RelaySimpleSynbol OPERATOR_OF;

terminal RelaySimpleSymbol KEYWORD_LINE;
terminal RelaySimpleSymbol KEYWORD_FROM;
terminal RelaySimpleSymbol KEYWORD_TO;
terminal RelaySimpleSymbol KEYWORD_DEF;

/* non-terminals */

non terminal RootSymbol					goal;
non terminal BlockSymbol				block;
non terminal IdentifyerSymbol			identifyer;
non terminal BlockContentListSymbol		block_content_list;
non terminal BlockContentItemSymbol		block_content_line;
non terminal BlockContentItemSymbol		block_content_item;
non terminal VariableDefinitionSymbol	variable_definition;
non terminal BlockPropertySymbol		block_property;
non terminal ExpressionSymbol 			expression;
non terminal VariableAccessSymbol		variable_access;
non terminal FunctionCallSymbol			function_call;
non terminal CodeBlockSymbol 			code_block;
non terminal StatementListSymbol		code_statement_list;
non terminal CodeStatementSymbol		code_statement;
non terminal ParameterListSymbol		parameter_list;
non terminal UnitSymbol					unit;

/* precedence rules */

precedence left OPERATOR_PLUS, OPERATOR_MINUS; 
precedence left NEW_LINE, BLOCK_CLOSE;

/* start symbol definition */

start with goal;

/* grammar definition */

goal ::=	
		block:block
																								{: RESULT = new RootSymbol(new LocationRange(block.location.start, block.location.end), block); :}
	;

block ::=	
		BLOCK_OPEN:openToken NEW_LINE block_content_list:blockContent BLOCK_CLOSE:closeToken	
																								{: RESULT = new BlockSymbol(new LocationRange(openTokenxleft, closeTokenxright), blockContent); :}
	|	BLOCK_OPEN:openToken identifyer:blockName NEW_LINE block_content_list:blockContent BLOCK_CLOSE:closeToken	
																								{: RESULT = new BlockSymbol(new LocationRange(openTokenxleft, closeTokenxright), blockContent, blockName); :}
	|	BLOCK_OPEN:openToken identifyer:blockName COLON identifyer:blockType NEW_LINE block_content_list:blockContent BLOCK_CLOSE:closeToken	
																								{: RESULT = new BlockSymbol(new LocationRange(openTokenxleft, closeTokenxright), blockContent, blockName, blockType);  :}
	;

block_content_list ::=	
		/* empty */																				{: RESULT = null; :}
	|	block_content_list:remainingSymbols block_content_line:listSymbol						
																								{: RESULT = new BlockContentListSymbol(new LocationRange(listSymbolxleft, listSymbolxright), listSymbol, remainingSymbols); :}
	;

block_content_line ::=
		block_content_item:item NEW_LINE														{: RESULT = item; :}
	|	block_content_item:item SEMICOLON														{: RESULT = item; :}
	;

block_content_item ::=
		block:item 
																								{: RESULT = new BlockContentItemSymbol(new LocationRange(item.location.start, item.location.end), item); :}
	|	block_property:item
																								{: RESULT = new BlockContentItemSymbol(new LocationRange(item.location.start, item.location.end), item); :}
	|	code_block:item
																								{: RESULT = new BlockContentItemSymbol(new LocationRange(item.location.start, item.location.end), item); :}
	|	variable_definition:item
																								{: RESULT = new BlockContentItemSymbol(new LocationRange(item.location.start, item.location.end), item); :}
	|	/* empty */																				{: RESULT = null; :}
	;

code_block ::=
		CODE_BLOCK_OPEN:openToken code_statement_list:statementList CODE_BLOCK_CLOSE:closeToken	
																								{: RESULT = new CodeBlockSymbol(new LocationRange(openToken.location.start, closeToken.location.end), statementList); :}
	;

code_statement_list ::=
		code_statement:statement code_statement_list:remainingSymbols
																								{: RESULT = new StatementListSymbol(new LocationRange(statement.location.start, statement.location.end), statement, remainingSymbols); :}
	|	code_statement:statement
																								{: RESULT = new StatementListSymbol(new LocationRange(statement.location.start, statement.location.end), statement); :}
	;

code_statement ::=
		KEYWORD_LINE:firstToken KEYWORD_FROM BLOCK_OPEN expression:fromX COMMA expression:fromY BLOCK_CLOSE KEYWORD_TO BLOCK_OPEN expression:toX COMMA expression:toY BLOCK_CLOSE:endToken
																								{: RESULT = new LineStatementSymbol(new LocationRange(firstToken.location.start, endToken.location.end), fromX, fromY, toX, toY); :}
	;

block_property ::=
		identifyer:identifyer COLON expression:expression
																								{: RESULT = new BlockPropertySymbol(new LocationRange(identifyer.location.start, expression.location.end), identifyer, expression); :}
	;

expression ::=
		NUMBER:value unit:unit
																								{: RESULT = new ConstantValueSymbol(new LocationRange(valuexleft, unit.location.end), value, unit); :}
	|	NUMBER:value UNIT_PERCENT:percent OPERATOR_OF variable_access:variable_access													
																								{: RESULT = new PercentValueSymbol(new LocationRange(valuexleft, variable_accessxright), value, variable_access); :}
	|	expression:leftHandSide OPERATOR_PLUS expression:rightHandSide
																								{: RESULT = new AdditionExpressionSymbol(new LocationRange(leftHandSide.location.start, rightHandSide.location.end), leftHandSide, rightHandSide); :}
	|	BLOCK_OPEN:openToken expression:expression BLOCK_CLOSE:closeToken 
																								{: RESULT = new BracketExpressionSymbol(new LocationRange(openToken.location.start, openToken.location.end), expression); :}
	|	expression:leftHandSide OPERATOR_MINUS expression:rightHandSide							
																								{: RESULT = new SubtractionExpressionSymbol(new LocationRange(leftHandSide.location.start, rightHandSide.location.end), leftHandSide, rightHandSide); :}
	|	variable_access:variable_access 														{: RESULT = variable_access; :}
	|	function_call:call																		{: RESULT = call; :}
	;

unit ::=
		UNIT_PIXELS:pixels
																								{: RESULT = new UnitSymbol(new LocationRange(pixelsxleft, pixelsxright), Unit.PIXELS); :}
	;

variable_definition ::=
		KEYWORD_DEF:openToken identifyer:identifyer COLON expression:expression 
																								{: RESULT = new VariableDefinitionSymbol(new LocationRange(openTokenxleft, expressionxright), identifyer, expression); :}
	;

function_call ::=
		IDENTIFYER:identifyer BLOCK_OPEN parameter_list:parameters BLOCK_CLOSE:closeToken
																								{: RESULT = new FunctionCallSymbol(new LocationRange(identifyerxleft, closeTokenxright), identifyer, parameters); :}
	;

parameter_list ::=
		expression:expression COMMA parameter_list:remainingSymbols
																								{: RESULT = new ParameterListSymbol(new LocationRange(expression.location.start, remainingSymbols.location.end), expression, remainingSymbols); :}
	|	/* empty */ 																			{: RESULT = null; :}
	;

variable_access ::=
		identifyer:identifyer DOT variable_access:remainingAccess								
																								{: RESULT = new VariableAccessSymbol(new LocationRange(identifyerxleft, identifyerxright), identifyer, remainingAccess); :}
	|	identifyer:identifyer
																								{: RESULT = new VariableAccessSymbol(new LocationRange(identifyerxleft, identifyerxright), identifyer); :}
	;

identifyer ::=
		IDENTIFYER:identifyer
																								{: RESULT = new IdentifyerSymbol(new LocationRange(identifyerxleft, identifyerxright), identifyer); :}
	;