/* The following code was generated by JFlex 1.6.1 */

package parser;

import java_cup.runtime.*;
import static parser.sym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>relay.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\0\1\1\1\0\1\0\1\0\16\3\4\0\1\0\1\0"+
    "\1\0\1\0\1\2\1\37\1\0\1\0\1\12\1\13\1\0\1\7"+
    "\1\11\1\40\1\5\1\0\1\4\1\4\2\4\4\4\2\4\1\10"+
    "\6\0\4\2\1\6\1\2\5\2\1\2\13\2\1\2\2\2\1\0"+
    "\1\0\2\0\1\2\1\0\1\2\1\25\1\2\1\20\1\23\1\32"+
    "\1\24\1\22\1\17\2\2\1\31\1\27\1\34\1\26\1\30\1\2"+
    "\1\33\1\35\1\21\2\2\1\16\1\36\2\2\1\14\1\0\1\15"+
    "\1\0\41\3\2\0\4\2\4\0\1\2\2\0\1\3\7\0\1\2"+
    "\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u01ca\2\4\0\14\2"+
    "\16\0\5\2\7\0\1\2\1\0\1\2\21\0\160\3\5\2\1\0"+
    "\2\2\2\0\4\2\10\0\1\2\1\0\3\2\1\0\1\2\1\0"+
    "\24\2\1\0\123\2\1\0\213\2\1\0\5\3\2\0\236\2\11\0"+
    "\46\2\2\0\1\2\7\0\47\2\7\0\1\2\1\0\55\3\1\0"+
    "\1\3\1\0\2\3\1\0\2\3\1\0\1\3\10\0\33\2\5\0"+
    "\3\2\15\0\5\3\6\0\1\2\4\0\13\3\5\0\53\2\37\3"+
    "\4\0\2\2\1\3\143\2\1\0\1\2\10\3\1\0\6\3\2\2"+
    "\2\3\1\0\4\3\2\2\12\3\3\2\2\0\1\2\17\0\1\3"+
    "\1\2\1\3\36\2\33\3\2\0\131\2\13\3\1\2\16\0\12\3"+
    "\41\2\11\3\2\2\4\0\1\2\5\0\26\2\4\3\1\2\11\3"+
    "\1\2\3\3\1\2\5\3\22\0\31\2\3\3\104\0\1\2\1\0"+
    "\13\2\67\0\33\3\1\0\4\3\66\2\3\3\1\2\22\3\1\2"+
    "\7\3\12\2\2\3\2\0\12\3\1\0\7\2\1\0\7\2\1\0"+
    "\3\3\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\1\2\3\0\4\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0"+
    "\3\3\1\2\10\0\1\3\4\0\2\2\1\0\3\2\2\3\2\0"+
    "\12\3\4\2\7\0\1\2\5\0\3\3\1\0\6\2\4\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2"+
    "\2\0\1\3\1\0\5\3\4\0\2\3\2\0\3\3\3\0\1\3"+
    "\7\0\4\2\1\0\1\2\7\0\14\3\3\2\1\3\13\0\3\3"+
    "\1\0\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2"+
    "\1\0\5\2\2\0\1\3\1\2\10\3\1\0\3\3\1\0\3\3"+
    "\2\0\1\2\17\0\2\2\2\3\2\0\12\3\1\0\1\2\17\0"+
    "\3\3\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\2\2\1\0\5\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0"+
    "\3\3\10\0\2\3\4\0\2\2\1\0\3\2\2\3\2\0\12\3"+
    "\1\0\1\2\20\0\1\3\1\2\1\0\6\2\3\0\3\2\1\0"+
    "\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0"+
    "\3\2\3\0\14\2\4\0\5\3\3\0\3\3\1\0\4\3\2\0"+
    "\1\2\6\0\1\3\16\0\12\3\11\0\1\2\7\0\3\3\1\0"+
    "\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\3\0"+
    "\1\2\7\3\1\0\3\3\1\0\4\3\7\0\2\3\1\0\2\2"+
    "\6\0\2\2\2\3\2\0\12\3\22\0\2\3\1\0\10\2\1\0"+
    "\3\2\1\0\27\2\1\0\12\2\1\0\5\2\2\0\1\3\1\2"+
    "\7\3\1\0\3\3\1\0\4\3\7\0\2\3\7\0\1\2\1\0"+
    "\2\2\2\3\2\0\12\3\1\0\2\2\17\0\2\3\1\0\10\2"+
    "\1\0\3\2\1\0\51\2\2\0\1\2\7\3\1\0\3\3\1\0"+
    "\4\3\1\2\10\0\1\3\10\0\2\2\2\3\2\0\12\3\12\0"+
    "\6\2\2\0\2\3\1\0\22\2\3\0\30\2\1\0\11\2\1\0"+
    "\1\2\2\0\7\2\3\0\1\3\4\0\6\3\1\0\1\3\1\0"+
    "\10\3\22\0\2\3\15\0\60\2\1\3\2\2\7\3\4\0\10\2"+
    "\10\3\1\0\12\3\47\0\2\2\1\0\1\2\2\0\2\2\1\0"+
    "\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0"+
    "\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\3\2\2\6\3"+
    "\1\0\2\3\1\2\2\0\5\2\1\0\1\2\1\0\6\3\2\0"+
    "\12\3\2\0\4\2\40\0\1\2\27\0\2\3\6\0\12\3\13\0"+
    "\1\3\1\0\1\3\1\0\1\3\4\0\2\3\10\2\1\0\44\2"+
    "\4\0\24\3\1\0\2\3\5\2\13\3\1\0\44\3\11\0\1\3"+
    "\71\0\53\2\24\3\1\2\12\3\6\0\6\2\4\3\4\2\3\3"+
    "\1\2\3\3\2\2\7\3\3\2\4\3\15\2\14\3\1\2\17\3"+
    "\2\0\46\2\1\0\1\2\5\0\1\2\2\0\53\2\1\0\u014d\2"+
    "\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\51\2"+
    "\1\0\4\2\2\0\41\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\17\2\1\0\71\2\1\0\4\2\2\0\103\2"+
    "\2\0\3\3\40\0\20\2\20\0\125\2\14\0\u026c\2\2\0\21\2"+
    "\1\0\32\2\5\0\113\2\3\0\3\2\17\0\15\2\1\0\4\2"+
    "\3\3\13\0\22\2\3\3\13\0\22\2\2\3\14\0\15\2\1\0"+
    "\3\2\1\0\2\3\14\0\64\2\40\3\3\0\1\2\3\0\2\2"+
    "\1\3\2\0\12\3\41\0\3\3\2\0\12\3\6\0\130\2\10\0"+
    "\51\2\1\3\1\2\5\0\106\2\12\0\35\2\3\0\14\3\4\0"+
    "\14\3\12\0\12\3\36\2\2\0\5\2\13\0\54\2\4\0\21\3"+
    "\7\2\2\3\6\0\12\3\46\0\27\2\5\3\4\0\65\2\12\3"+
    "\1\0\35\3\2\0\13\3\6\0\12\3\15\0\1\2\130\0\5\3"+
    "\57\2\21\3\7\2\4\0\12\3\21\0\11\3\14\0\3\3\36\2"+
    "\15\3\2\2\12\3\54\2\16\3\14\0\44\2\24\3\10\0\12\3"+
    "\3\0\3\2\12\3\44\2\122\0\3\3\1\0\25\3\4\2\1\3"+
    "\4\2\3\3\2\2\11\0\300\2\47\3\25\0\4\3\u0116\2\2\0"+
    "\6\2\2\0\46\2\2\0\6\2\2\0\10\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\37\2\2\0\65\2\1\0\7\2\1\0"+
    "\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0\6\2\4\0"+
    "\15\2\5\0\3\2\1\0\7\2\16\0\5\3\32\0\5\3\20\0"+
    "\2\2\23\0\1\2\13\0\5\3\5\0\6\3\1\0\1\2\15\0"+
    "\1\2\20\0\15\2\3\0\33\2\25\0\15\3\4\0\1\3\3\0"+
    "\14\3\21\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0"+
    "\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0"+
    "\13\2\2\0\4\2\5\0\5\2\4\0\1\2\21\0\51\2\u0a77\0"+
    "\57\2\1\0\57\2\1\0\205\2\6\0\4\2\3\3\2\2\14\0"+
    "\46\2\1\0\1\2\5\0\1\2\2\0\70\2\7\0\1\2\17\0"+
    "\1\3\27\2\11\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2"+
    "\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0\40\3"+
    "\57\0\1\2\u01d5\0\3\2\31\0\11\2\6\3\1\0\5\2\2\0"+
    "\5\2\4\0\126\2\2\0\2\3\2\0\3\2\1\0\132\2\1\0"+
    "\4\2\5\0\51\2\3\0\136\2\21\0\33\2\65\0\20\2\u0200\0"+
    "\u19b6\2\112\0\u51cd\2\63\0\u048d\2\103\0\56\2\2\0\u010d\2\3\0"+
    "\20\2\12\3\2\2\24\0\57\2\1\3\4\0\12\3\1\0\31\2"+
    "\7\0\1\3\120\2\2\3\45\0\11\2\2\0\147\2\2\0\4\2"+
    "\1\0\4\2\14\0\13\2\115\0\12\2\1\3\3\2\1\3\4\2"+
    "\1\3\27\2\5\3\20\0\1\2\7\0\64\2\14\0\2\3\62\2"+
    "\21\3\13\0\12\3\6\0\22\3\6\2\3\0\1\2\4\0\12\3"+
    "\34\2\10\3\2\0\27\2\15\3\14\0\35\2\3\0\4\3\57\2"+
    "\16\3\16\0\1\2\12\3\46\0\51\2\16\3\11\0\3\2\1\3"+
    "\10\2\2\3\2\0\12\3\6\0\27\2\3\0\1\2\1\3\4\0"+
    "\60\2\1\3\1\2\3\3\2\2\2\3\5\2\2\3\1\2\1\3"+
    "\1\2\30\0\3\2\2\0\13\2\5\3\2\0\3\2\2\3\12\0"+
    "\6\2\2\0\6\2\2\0\6\2\11\0\7\2\1\0\7\2\221\0"+
    "\43\2\10\3\1\0\2\3\2\0\12\3\6\0\u2ba4\2\14\0\27\2"+
    "\4\0\61\2\u2104\0\u016e\2\2\0\152\2\46\0\7\2\14\0\5\2"+
    "\5\0\1\2\1\3\12\2\1\0\15\2\1\0\5\2\1\0\1\2"+
    "\1\0\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2"+
    "\2\0\66\2\50\0\15\2\3\0\20\3\20\0\7\3\14\0\2\2"+
    "\30\0\3\2\31\0\1\2\6\0\5\2\1\0\207\2\2\0\1\3"+
    "\4\0\1\2\13\0\12\3\7\0\32\2\4\0\1\2\1\0\32\2"+
    "\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2"+
    "\3\0\2\2\3\0\2\2\22\0\3\3\4\0\14\2\1\0\32\2"+
    "\1\0\23\2\1\0\2\2\1\0\17\2\2\0\16\2\42\0\173\2"+
    "\105\0\65\2\210\0\1\3\202\0\35\2\3\0\61\2\57\0\37\2"+
    "\21\0\33\2\65\0\36\2\2\0\44\2\4\0\10\2\1\0\5\2"+
    "\52\0\236\2\2\0\12\3\u0356\0\6\2\2\0\1\2\1\0\54\2"+
    "\1\0\2\2\3\0\1\2\2\0\27\2\252\0\26\2\12\0\32\2"+
    "\106\0\70\2\6\0\2\2\100\0\1\2\3\3\1\0\2\3\5\0"+
    "\4\3\4\2\1\0\3\2\1\0\33\2\4\0\3\3\4\0\1\3"+
    "\40\0\35\2\203\0\66\2\12\0\26\2\12\0\23\2\215\0\111\2"+
    "\u03b7\0\3\3\65\2\17\3\37\0\12\3\20\0\3\3\55\2\13\3"+
    "\2\0\1\3\22\0\31\2\7\0\12\3\6\0\3\3\44\2\16\3"+
    "\1\0\12\3\100\0\3\3\60\2\16\3\4\2\13\0\12\3\u04a6\0"+
    "\53\2\15\3\10\0\12\3\u0936\0\u036f\2\221\0\143\2\u0b9d\0\u042f\2"+
    "\u33d1\0\u0239\2\u04c7\0\105\2\13\0\1\2\56\3\20\0\4\3\15\2"+
    "\u4060\0\2\2\u2163\0\5\3\3\0\26\3\2\0\7\3\36\0\4\3"+
    "\224\0\3\3\u01bb\0\125\2\1\0\107\2\1\0\2\2\2\0\1\2"+
    "\2\0\2\2\2\0\4\2\1\0\14\2\1\0\1\2\1\0\7\2"+
    "\1\0\101\2\1\0\4\2\2\0\10\2\1\0\7\2\1\0\34\2"+
    "\1\0\4\2\1\0\5\2\1\0\1\2\3\0\7\2\1\0\u0154\2"+
    "\2\0\31\2\1\0\31\2\1\0\37\2\1\0\31\2\1\0\37\2"+
    "\1\0\31\2\1\0\37\2\1\0\31\2\1\0\37\2\1\0\31\2"+
    "\1\0\10\2\2\0\62\3\u1600\0\4\2\1\0\33\2\1\0\2\2"+
    "\1\0\1\2\2\0\1\2\1\0\12\2\1\0\4\2\1\0\1\2"+
    "\1\0\1\2\6\0\1\2\4\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\3\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\2\2\1\0\1\2"+
    "\2\0\4\2\1\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2"+
    "\1\0\12\2\1\0\21\2\5\0\3\2\1\0\5\2\1\0\21\2"+
    "\u1144\0\ua6d7\2\51\0\u1035\2\13\0\336\2\u3fe2\0\u021e\2\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\3\36\0\140\3\200\0\360\3\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\11\3\1\15\1\16"+
    "\1\4\1\0\1\3\1\17\4\3\1\20\4\3\1\4"+
    "\1\0\1\3\1\21\11\3\1\0\4\3\1\22\1\23"+
    "\1\24\1\3\1\25\2\0\4\3\1\26\2\0\1\27"+
    "\1\30\1\31\1\3\3\0\1\3\1\32\3\0\1\3"+
    "\1\33\2\0\1\3\2\0\1\34\1\35\1\0\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\102\0\143\0\204\0\245\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\102"+
    "\0\102\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5"+
    "\0\u02d6\0\143\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b\0\u037b"+
    "\0\u039c\0\u03bd\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483"+
    "\0\u04a4\0\u04c5\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b"+
    "\0\143\0\143\0\143\0\u05ac\0\143\0\u05cd\0\u05ee\0\u060f"+
    "\0\u0630\0\u0651\0\u0672\0\143\0\u0693\0\u06b4\0\143\0\u06d5"+
    "\0\143\0\u06f6\0\u0717\0\u0738\0\u0759\0\u077a\0\102\0\u079b"+
    "\0\u07bc\0\u07dd\0\u07fe\0\102\0\u081f\0\u0840\0\u0861\0\u0882"+
    "\0\u08a3\0\143\0\102\0\u08c4\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\6\1\7\1\5\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\2\5"+
    "\1\20\1\21\2\5\1\22\1\23\1\5\1\24\1\25"+
    "\1\26\1\27\3\5\1\30\1\31\41\3\43\0\3\5"+
    "\1\0\1\5\7\0\21\5\6\0\1\6\1\32\1\33"+
    "\14\0\1\33\21\0\1\32\36\0\3\5\1\0\1\5"+
    "\7\0\1\5\1\34\17\5\4\0\3\5\1\0\1\5"+
    "\7\0\10\5\1\35\10\5\4\0\3\5\1\0\1\5"+
    "\7\0\5\5\1\36\13\5\4\0\3\5\1\0\1\5"+
    "\7\0\10\5\1\37\10\5\4\0\3\5\1\0\1\5"+
    "\7\0\15\5\1\40\3\5\4\0\3\5\1\0\1\5"+
    "\7\0\15\5\1\41\2\5\1\42\4\0\3\5\1\0"+
    "\1\5\7\0\1\5\1\43\3\5\1\44\13\5\4\0"+
    "\3\5\1\0\1\5\7\0\15\5\1\45\3\5\4\0"+
    "\3\5\1\0\1\5\7\0\1\5\1\46\17\5\6\0"+
    "\1\32\1\0\1\33\14\0\1\33\21\0\1\47\2\0"+
    "\1\50\30\0\1\50\2\0\3\5\1\0\1\5\7\0"+
    "\2\5\1\51\16\5\4\0\3\5\1\0\1\5\7\0"+
    "\12\5\1\52\6\5\4\0\3\5\1\0\1\5\7\0"+
    "\1\5\1\53\17\5\4\0\3\5\1\0\1\5\7\0"+
    "\3\5\1\54\15\5\4\0\3\5\1\0\1\5\7\0"+
    "\1\5\1\55\17\5\4\0\3\5\1\0\1\5\7\0"+
    "\10\5\1\56\10\5\4\0\3\5\1\0\1\5\7\0"+
    "\16\5\1\57\2\5\4\0\3\5\1\0\1\5\7\0"+
    "\14\5\1\60\4\5\4\0\3\5\1\0\1\5\7\0"+
    "\10\5\1\61\10\5\4\0\3\5\1\0\1\5\7\0"+
    "\6\5\1\62\12\5\6\0\1\47\36\0\3\5\1\0"+
    "\1\5\7\0\3\5\1\63\15\5\4\0\3\5\1\0"+
    "\1\5\7\0\21\5\1\0\1\64\2\0\3\5\1\0"+
    "\1\5\7\0\6\5\1\65\12\5\4\0\3\5\1\0"+
    "\1\5\7\0\3\5\1\66\15\5\4\0\3\5\1\0"+
    "\1\5\7\0\6\5\1\67\12\5\4\0\3\5\1\0"+
    "\1\5\7\0\12\5\1\70\6\5\4\0\3\5\1\0"+
    "\1\5\7\0\5\5\1\71\13\5\4\0\3\5\1\0"+
    "\1\5\7\0\3\5\1\72\15\5\4\0\3\5\1\0"+
    "\1\5\7\0\11\5\1\73\7\5\4\0\3\5\1\0"+
    "\1\5\7\0\4\5\1\74\14\5\4\0\3\5\1\0"+
    "\1\5\7\0\4\5\1\75\14\5\33\0\1\76\1\0"+
    "\1\77\7\0\3\5\1\0\1\5\7\0\4\5\1\100"+
    "\14\5\4\0\3\5\1\0\1\5\7\0\10\5\1\101"+
    "\10\5\4\0\3\5\1\0\1\5\7\0\1\5\1\102"+
    "\17\5\4\0\3\5\1\0\1\5\7\0\5\5\1\103"+
    "\13\5\4\0\3\5\1\0\1\5\7\0\3\5\1\104"+
    "\15\5\25\0\1\105\34\0\1\106\23\0\3\5\1\0"+
    "\1\5\7\0\3\5\1\107\15\5\4\0\3\5\1\0"+
    "\1\5\7\0\11\5\1\110\7\5\4\0\3\5\1\0"+
    "\1\5\7\0\16\5\1\111\2\5\4\0\3\5\1\0"+
    "\1\5\7\0\15\5\1\112\3\5\34\0\1\113\32\0"+
    "\1\114\16\0\3\5\1\0\1\5\7\0\21\5\1\0"+
    "\1\115\2\0\3\5\1\0\1\5\7\0\3\5\1\116"+
    "\15\5\23\0\1\117\41\0\1\120\47\0\1\121\1\0"+
    "\1\122\7\0\3\5\1\0\1\5\7\0\1\5\1\123"+
    "\17\5\23\0\1\124\42\0\1\125\34\0\1\126\23\0"+
    "\3\5\1\0\1\5\7\0\5\5\1\127\13\5\34\0"+
    "\1\130\32\0\1\131\16\0\3\5\1\0\1\5\7\0"+
    "\17\5\1\132\1\5\23\0\1\133\41\0\1\134\37\0"+
    "\1\135\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2277];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\3\1\7\11\11\1\2\11\1\1\1\0"+
    "\14\1\1\0\13\1\1\0\11\1\2\0\5\1\2\0"+
    "\4\1\3\0\1\1\1\11\3\0\1\1\1\11\2\0"+
    "\1\1\2\0\1\1\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuilder string = new StringBuilder();
	
	private Symbol symbol(int type) {
		return new JavaSymbol(type, yyline+1, yycolumn+1);
	}

	private Symbol symbol(int type, Object value) {
		return new JavaSymbol(type, yyline+1, yycolumn+1, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2856) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
																															"\" at line "+yyline+", column "+yycolumn);
            }
          case 31: break;
          case 2: 
            { return symbol(NEWLINE);
            }
          case 32: break;
          case 3: 
            { return symbol(IDENTIFYER);
            }
          case 33: break;
          case 4: 
            { return symbol(NUMBER);
            }
          case 34: break;
          case 5: 
            { return symbol(DOT);
            }
          case 35: break;
          case 6: 
            { return symbol(OPERATOR_PLUS);
            }
          case 36: break;
          case 7: 
            { return symbol(COLON);
            }
          case 37: break;
          case 8: 
            { return symbol(COMMA);
            }
          case 38: break;
          case 9: 
            { return symbol(BLOCK_OPEN);
            }
          case 39: break;
          case 10: 
            { return symbol(BLOCK_CLOSE);
            }
          case 40: break;
          case 11: 
            { return symbol(CODE_BLOCK_OPEN);
            }
          case 41: break;
          case 12: 
            { return symbol(CODE_BLOCK_CLOSE);
            }
          case 42: break;
          case 13: 
            { return symbol(UNIT_PERCENT);
            }
          case 43: break;
          case 14: 
            { return symbol(OPERATOR_MINUS);
            }
          case 44: break;
          case 15: 
            { return symbol(KEYWORD_TO);
            }
          case 45: break;
          case 16: 
            { return symbol(UNIT_PIXELS);
            }
          case 46: break;
          case 17: 
            { return symbol(PROPERTY_TOP);
            }
          case 47: break;
          case 18: 
            { return symbol(KEYWORD_LINE);
            }
          case 48: break;
          case 19: 
            { return symbol(PROPERTY_LEFT);
            }
          case 49: break;
          case 20: 
            { return symbol(KEYWORD_FROM);
            }
          case 50: break;
          case 21: 
            { return symbol(PROPERTY_WIDTH);
            }
          case 51: break;
          case 22: 
            { return symbol(PROPERTY_RIGHT);
            }
          case 52: break;
          case 23: 
            { return symbol(PROPERTY_HEIGHT);
            }
          case 53: break;
          case 24: 
            { return symbol(PROPERTY_BOTTOM);
            }
          case 54: break;
          case 25: 
            { return symbol(PROPERTY_ORIGIN);
            }
          case 55: break;
          case 26: 
            { return symbol(ORIGIN_TOP_LEFT);
            }
          case 56: break;
          case 27: 
            { return symbol(ORIGIN_TOP_RIGHT);
            }
          case 57: break;
          case 28: 
            { return symbol(PROPERTY_PROPERTIES);
            }
          case 58: break;
          case 29: 
            { return symbol(ORIGIN_BOTTOM_LEFT);
            }
          case 59: break;
          case 30: 
            { return symbol(ORIGIN_BOTTOM_RIGHT);
            }
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
