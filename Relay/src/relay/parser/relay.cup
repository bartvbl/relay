import java_cup.runtime.*;

import relay.parser.symbols.AdditionExpressionSymbol;
import relay.parser.symbols.BlockContentItemSymbol;
import relay.parser.symbols.BlockContentListSymbol;
import relay.parser.symbols.BlockPropertySymbol;
import relay.parser.symbols.CodeBlockSymbol;
import relay.parser.symbols.CodeStatementSymbol;
import relay.parser.symbols.ExpressionSymbol;
import relay.parser.symbols.FunctionCallSymbol;
import relay.parser.symbols.IdentifyerSymbol;
import relay.parser.symbols.LineStatementSymbol;
import relay.parser.symbols.ParameterListSymbol;
import relay.parser.symbols.RootSymbol;
import relay.parser.symbols.BlockSymbol;
import relay.parser.symbols.StatementListSymbol;
import relay.parser.symbols.SubtractionExpressionSymbol;
import relay.parser.symbols.UnitSymbol;
import relay.parser.symbols.ValueSymbol;
import relay.parser.symbols.VariableAccessSymbol;

import relay.data.Unit;
import relay.types.BlockType;

/* terminals */

terminal NEW_LINE;
terminal Double NUMBER;
terminal COLON;
terminal SEMICOLON;
terminal DOT;
terminal String IDENTIFYER;
terminal COMMA;

terminal BLOCK_OPEN;
terminal BLOCK_CLOSE;

terminal CODE_BLOCK_OPEN;
terminal CODE_BLOCK_CLOSE;

terminal UnitSymbol UNIT_PIXELS;
terminal UnitSymbol UNIT_PERCENT;

terminal OPERATOR_PLUS;
terminal OPERATOR_MINUS;

terminal KEYWORD_LINE;
terminal KEYWORD_FROM;
terminal KEYWORD_TO;

/* non-terminals */

non terminal RootSymbol				goal;
non terminal BlockSymbol			block;
non terminal IdentifyerSymbol		identifyer;
non terminal BlockContentListSymbol	block_content_list;
non terminal BlockContentItemSymbol	block_content_line;
non terminal BlockContentItemSymbol	block_content_item;
non terminal BlockPropertySymbol	block_property;
non terminal ExpressionSymbol 		expression;
non terminal UnitSymbol				unit;
non terminal VariableAccessSymbol	variable_access;
non terminal FunctionCallSymbol		function_call;
non terminal CodeBlockSymbol 		code_block;
non terminal StatementListSymbol	code_statement_list;
non terminal CodeStatementSymbol	code_statement;
non terminal ParameterListSymbol	parameter_list;

/* precedence rules */

precedence left OPERATOR_PLUS, OPERATOR_MINUS; 
precedence left NEW_LINE, BLOCK_CLOSE;

/* start symbol definition */

start with goal;

/* grammar definition */

goal ::=	
		block:block 																			{: RESULT = new RootSymbol(block); :}
	;

block ::=	
		BLOCK_OPEN identifyer:blockName NEW_LINE block_content_list:blockContent BLOCK_CLOSE 	{: RESULT = new BlockSymbol(blockName, blockContent, new IdentifyerSymbol(BlockType.Basic.toString())); :}
	|	BLOCK_OPEN NEW_LINE block_content_list:blockContent BLOCK_CLOSE							{: RESULT = new BlockSymbol(new IdentifyerSymbol("[untitled block]"), blockContent, new IdentifyerSymbol(BlockType.Basic.toString())); :}
	|	BLOCK_OPEN identifyer:blockName COLON identifyer:blockType NEW_LINE block_content_list:blockContent BLOCK_CLOSE		
																								{: RESULT = new BlockSymbol(new IdentifyerSymbol("[untitled block]"), blockContent, blockType); :}
	;

block_content_list ::=	
		/* empty */																				{: RESULT = null; :}
	|	block_content_list:remainingSymbols block_content_line:listSymbol						{: RESULT = new BlockContentListSymbol(listSymbol, remainingSymbols); :}
	;

block_content_line ::=
		block_content_item:item NEW_LINE														{: RESULT = item; :}
	|	block_content_item:item SEMICOLON														{: RESULT = item; :}
	;

block_content_item ::=
		block:item 																				{: RESULT = new BlockContentItemSymbol(item); :}
	|	block_property:item 																	{: RESULT = new BlockContentItemSymbol(item); :}
	|	code_block:item 																		{: RESULT = new BlockContentItemSymbol(item); :}
	|	/* empty */																				{: RESULT = new BlockContentItemSymbol(); :}
	;

code_block ::=
		CODE_BLOCK_OPEN code_statement_list:statementList CODE_BLOCK_CLOSE 						{: RESULT = new CodeBlockSymbol(statementList); :}
	;

code_statement_list ::=
		code_statement:statement code_statement_list:remainingSymbols 							{: RESULT = new StatementListSymbol(statement, remainingSymbols); :}
	|	code_statement:statement 																{: RESULT = new StatementListSymbol(statement); :}
	;

code_statement ::=
		KEYWORD_LINE KEYWORD_FROM BLOCK_OPEN expression:fromX COMMA expression:fromY BLOCK_CLOSE KEYWORD_TO BLOCK_OPEN expression:toX COMMA expression:toY BLOCK_CLOSE 																{: RESULT = new LineStatementSymbol(fromX, fromY, toX, toY); :}
	;

block_property ::=
		identifyer:identifyer COLON expression:expression										{: RESULT = new BlockPropertySymbol(identifyer, expression); :}
	;

expression ::=
		NUMBER:value unit:unit 																	{: RESULT = new ValueSymbol(value, unit); :}
	|	expression:lefthandside OPERATOR_PLUS expression:righthandside							{: RESULT = new AdditionExpressionSymbol(lefthandside, righthandside); :}
	|	expression:lefthandside OPERATOR_MINUS expression:righthandside							{: RESULT = new SubtractionExpressionSymbol(lefthandside, righthandside); :}
	|	variable_access:variable_access 														{: RESULT = variable_access; :}
	|	function_call:call																		{: RESULT = call; :}
	;

function_call ::=
		IDENTIFYER:identifyer BLOCK_OPEN parameter_list:parameters BLOCK_CLOSE 					{: RESULT = new FunctionCallSymbol(identifyer, parameters); :}
	;

parameter_list ::=
		expression:expression COMMA parameter_list:remainingSymbols 							{: RESULT = new ParameterListSymbol(expression, remainingSymbols); :}
	|	/* empty */ 																			{: RESULT = null; :}
	;

variable_access ::=
		identifyer:identifyer DOT variable_access:remainingAccess								{: RESULT = new VariableAccessSymbol(identifyer, remainingAccess); :}
	|	identifyer:identifyer 																	{: RESULT = new VariableAccessSymbol(identifyer); :}
	;

unit ::=
		UNIT_PIXELS 																			{: RESULT = new UnitSymbol(Unit.PIXELS); :}
	|	UNIT_PERCENT 																			{: RESULT = new UnitSymbol(Unit.PERCENT); :}
	;

identifyer ::=
		IDENTIFYER:identifyer 																	{: RESULT = new IdentifyerSymbol(identifyer); :}
	;